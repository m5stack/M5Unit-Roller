/*
 *SPDX-FileCopyrightText: 2024 M5Stack Technology CO LTD
 *
 *SPDX-License-Identifier: MIT
 */

#ifndef __UNIT_ROLLERI2C_H
#define __UNIT_ROLLERI2C_H

#include "Arduino.h"
#include "Wire.h"

#define UNIT_ROLLER_DEBUG Serial  // This macro definition can be annotated without sending and receiving data prints
//       Define the serial port you want to use, e.g., Serial1 or Serial2
#if defined UNIT_ROLLER_DEBUG
#define serialPrint(...)   UNIT_ROLLER_DEBUG.print(__VA_ARGS__)
#define serialPrintln(...) UNIT_ROLLER_DEBUG.println(__VA_ARGS__)
#define serialPrintf(...)  UNIT_ROLLER_DEBUG.printf(__VA_ARGS__)
#define serialFlush()      UNIT_ROLLER_DEBUG.flush()
#else

#endif
/**
 * @brief I2C Address of the Unit Roller device.
 *
 * This address is used to identify the Unit Roller device on the I2C bus.
 */
#define UNIT_ROLLERI2C_ADDR (0x64)

/**
 * @brief Output Register.
 *
 * This register is used to set the output parameters for the Unit Roller.
 */
#define UNIT_ROLLERI2C_OUTPUT_REG (0x00)

/**
 * @brief Mode Register.
 *
 * This register configures the operational mode of the Unit Roller.
 */
#define UNIT_ROLLERI2C_MODE_REG (0x01)

/**
 * @brief Reset Stalled Protection Register.
 *
 * This register can be used to reset the stalled protection mechanism.
 */
#define UNIT_ROLLERI2C_RESET_STALLED_PROTECT_REG (0x0B)

/**
 * @brief System Status Register.
 *
 * This register holds the current system status of the Unit Roller.
 */
#define UNIT_ROLLERI2C_SYS_STATUS_REG (0x0C)

/**
 * @brief Error Code Register.
 *
 * This register reports any error codes generated by the Unit Roller.
 */
#define UNIT_ROLLERI2C_ERROR_CODE_REG (0x0D)

/**
 * @brief Key Switch Mode Register.
 *
 * This register configures the key switch mode for the Unit Roller.
 */
#define UNIT_ROLLERI2C_KEY_SWTICH_MODE_REG (0x0E)

/**
 * @brief Stall Protection Register.
 *
 * This register enables or disables stall protection features.
 */
#define UNIT_ROLLERI2C_STALL_PROTECTION_REG (0x0F)

/**
 * @brief Identification Register.
 *
 * This register contains the identity information of the Unit Roller.
 */
#define UNIT_ROLLERI2C_ID_REG (0x10)

/**
 * @brief Baud Rate Setting Register.
 *
 * This register sets the baud rate for communication.
 */
#define UNIT_ROLLERI2C_BPS_REG (0x11)

/**
 * @brief RGB Brightness Register.
 *
 * This register controls the brightness level of the RGB output.
 */
#define UNIT_ROLLERI2C_RGB_BRIGHTNESS_REG (0x12)

/**
 * @brief Maximum Current Register.
 *
 * This register sets the maximum current limit for the motor.
 */
#define UNIT_ROLLERI2C_POS_MAX_CURRENT_REG (0x20)

/**
 * @brief RGB Control Register.
 *
 * This register is used to control RGB features of the Unit Roller.
 */
#define UNIT_ROLLERI2C_RGB_REG (0x30)

/**
 * @brief Voltage Input Register.
 *
 * This register reads the input voltage to the Unit Roller.
 */
#define UNIT_ROLLERI2C_VIN_REG (0x34)

/**
 * @brief Temperature Register.
 *
 * This register provides temperature readings from the Unit Roller.
 */
#define UNIT_ROLLERI2C_TEMP_REG (0x38)

/**
 * @brief Dial Counter Register.
 *
 * This register tracks the dial counter value.
 */
#define UNIT_ROLLERI2C_DIAL_COUNTER_REG (0x3C)

/**
 * @brief Speed Register.
 *
 * This register controls the speed parameters of the Unit Roller.
 */
#define UNIT_ROLLERI2C_SPEED_REG (0x40)

/**
 * @brief Speed Maximum Current Register.
 *
 * This register sets the maximum current when operating at a specified speed.
 */
#define UNIT_ROLLERI2C_SPEED_MAX_CURRENT_REG (0x50)

/**
 * @brief Speed Readback Register.
 *
 * This register reads back the current speed of the Unit Roller.
 */
#define UNIT_ROLLERI2C_SPEED_READBACK_REG (0x60)

/**
 * @brief Speed PID Register.
 *
 * This register contains PID settings for speed control.
 */
#define UNIT_ROLLERI2C_SPEED_PID_REG (0x70)

/**
 * @brief Position Register.
 *
 * This register tracks the current position of the Unit Roller.
 */
#define UNIT_ROLLERI2C_POS_REG (0x80)

/**
 * @brief Position Readback Register.
 *
 * This register allows reading back the position of the Unit Roller.
 */
#define UNIT_ROLLERI2C_POS_READBACK_REG (0x90)

/**
 * @brief Position PID Register.
 *
 * This register contains PID settings for position control.
 */
#define UNIT_ROLLERI2C_POS_PID_REG (0xA0)

/**
 * @brief Current Register.
 *
 * This register tracks the current flowing through the motor.
 */
#define UNIT_ROLLERI2C_CURRENT_REG (0xB0)

/**
 * @brief Current Readback Register.
 *
 * This register allows reading back the current value.
 */
#define UNIT_ROLLERI2C_CURRENT_READBACK_REG (0xC0)

/**
 * @brief Save to Flash Register.
 *
 * This register is used to save settings or data to the flash memory of the Unit Roller.
 */
#define UNIT_ROLLERI2C_SAVE_FLASH_REG (0xF0)

/**
 * @brief Firmware Version Register.
 *
 * This register provides the firmware version information of the Unit Roller.
 */
#define FIRMWARE_VERSION_REG (0xFE)

/**
 * @brief I2C Address Register.
 *
 * This register contains the I2C address of the device, allowing for identification
 * on the I2C bus.
 */
#define I2C_ADDRESS_REG (0xFF)

class UnitRollerI2C {
private:
    uint8_t _addr;
    TwoWire *_wire;
    uint8_t _scl;
    uint8_t _sda;
    uint8_t _speed;
    void writeBytes(uint8_t addr, uint8_t reg, uint8_t *buffer, uint8_t length);
    void readBytes(uint8_t addr, uint8_t reg, uint8_t *buffer, uint8_t length);
    float bytesToFloat(uint8_t *s);
    void floatToBytes(float s, uint8_t *d);

public:
    bool begin(TwoWire *wire = &Wire, uint8_t addr = UNIT_ROLLERI2C_ADDR, uint8_t sda = 21, uint8_t scl = 22,
               uint32_t speed = 4000000L);
    void setMode(uint8_t mode);
    void setOutput(uint8_t en);
    void setSpeed(int32_t speed);
    void setSpeedMaxCurrent(int32_t current);
    void setSpeedPID(uint32_t p, uint32_t i, uint32_t d);
    void setPos(int32_t pos);
    void setPosMaxCurrent(int32_t current);
    void setPosPID(uint32_t p, uint32_t i, uint32_t d);
    void setCurrent(int32_t current);
    void setDialCounter(int32_t counter);
    void setRGBMode(uint8_t mode);
    void setRGB(int32_t color);
    void setRGBBrightness(uint8_t brightness);
    void setMotorID(uint8_t id);
    void setBPS(uint8_t bps);
    void saveConfigToFlash(void);
    void resetStalledProtect(void);
    void setKeySwitchMode(uint8_t en);
    void setStallProtection(uint8_t en);
    uint8_t setI2CAddress(uint8_t addr);

    void getSpeedPID(uint32_t *p, uint32_t *i, uint32_t *d);
    void getPosPID(uint32_t *p, uint32_t *i, uint32_t *d);
    void getRGB(uint8_t *r, uint8_t *g, uint8_t *b);

    int32_t getSpeed(void);
    int32_t getSpeedMaxCurrent(void);
    int32_t getSpeedReadback(void);
    int32_t getPos(void);
    int32_t getPosMaxCurrent(void);
    int32_t getPosReadback(void);
    int32_t getCurrent(void);
    int32_t getCurrentReadback(void);
    int32_t getDialCounter(void);
    int32_t getVin(void);
    int32_t getTemp(void);

    uint8_t getSysStatus(void);
    uint8_t getErrorCode(void);
    uint8_t getStallProtection(void);
    uint8_t getKeySwitchMode(void);
    uint8_t getOutputStatus(void);
    uint8_t getMotorMode(void);
    uint8_t getMotorID(void);
    uint8_t getBPS(void);
    uint8_t getRGBBrightness(void);
    uint8_t getRGBMode(void);
    uint8_t getFirmwareVersion(void);
    uint8_t getI2CAddress(void);
};

#endif
