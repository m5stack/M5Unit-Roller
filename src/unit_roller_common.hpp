/*
 *SPDX-FileCopyrightText: 2024 M5Stack Technology CO LTD
 *
 *SPDX-License-Identifier: MIT
 */

#ifndef __UNIT_ROLLER_COMMON_H
#define __UNIT_ROLLER_COMMON_H

#include <Arduino.h>
#include <stdio.h>
#include <stdlib.h>

// #define UNIT_ROLLER_DEBUG Serial  // This macro definition can be annotated without sending and receiving data prints
//         Define the serial port you want to use, e.g., Serial1 or Serial2
#if defined UNIT_ROLLER_DEBUG
#define serialPrint(...)   UNIT_ROLLER_DEBUG.print(__VA_ARGS__)
#define serialPrintln(...) UNIT_ROLLER_DEBUG.println(__VA_ARGS__)
#define serialPrintf(...)  UNIT_ROLLER_DEBUG.printf(__VA_ARGS__)
#define serialFlush()      UNIT_ROLLER_DEBUG.flush()
#else
#endif

// Enum definition for error codes
typedef enum {
    ROLLER_WRITE_SUCCESS       = 1,  /**< Indicates a successful write operation. */
    ROLLER_WRITE_FAILED        = 0,  /**< Indicates a failure during write or read operations. */
    ROLLER_CRC_CHECK_FAIL      = -1, /**< Indicates a failure in CRC check. */
    ROLLER_SERIAL_TIMEOUT      = -2, /**< Indicates a timeout in serial communication. */
    ROLLER_UNEXPECTED_RESPONSE = -3, /**< Indicates an unexpected response received from the device. */
    ROLLER_SERIAL_SEND_FAILURE = -4  /**< Indicates a failure in sending serial data. */
} roller_errcode_t;

typedef enum {
    ROLLER_MODE_SPEED = 1,  // Speed mode
    ROLLER_MODE_POSITION,   // Position mode(2)
    ROLLER_MODE_CURRENT,    // Current mode (3)
    ROLLER_MODE_ENCODER     // Encoder mode (4)
} roller_mode_t;

typedef enum {
    // 485
    ROLLER_BPS_485_115200 = 0, /**< Baud rate of 115200 bps */
    ROLLER_BPS_485_19200,      /**< Baud rate of 19200 bps */
    ROLLER_BPS_485_9600,       /**< Baud rate of 9600 bps */
    // CAN
    ROLLER_BPS_CAN_1000000 = 0, /**< Baud rate of 1000 Kbps */
    ROLLER_BPS_CAN_500000,      /**< Baud rate of 500 Kbps */
    ROLLER_BPS_CAN_125000       /**< Baud rate of 125 Kbps */
} roller_bps_t;

typedef enum {
    ROLLER_RGB_MODE_DEFAULT = 0,  // System default mode
    ROLLER_RGB_MODE_USER_DEFINED  // User-defined mode
} roller_rgb_t;

/**
 * @brief I2C Address of the Unit Roller device.
 *
 * This address is used to identify the Unit Roller device on the I2C bus.
 */
#define I2C_ADDR (0x64)

/**
 * @brief Output Register.
 *
 * This register is used to set the output parameters for the Unit Roller.
 */
#define I2C_OUTPUT_REG (0x00)

/**
 * @brief Mode Register.
 *
 * This register configures the operational mode of the Unit Roller.
 */
#define I2C_MODE_REG (0x01)

/**
 * @brief Motor Position Over Range Protection:
 *
 * This register can be used to set the motor position out of range protection
 * mechanism.
 */
#define I2C_POS_RANGE_PROTECT_REG (0x0A)

/**
 * @brief Reset Stalled Protection Register.
 *
 * This register can be used to reset the stalled protection mechanism.
 */
#define I2C_RESET_STALLED_PROTECT_REG (0x0B)

/**
 * @brief System Status Register.
 *
 * This register holds the current system status of the Unit Roller.
 */
#define I2C_SYS_STATUS_REG (0x0C)

/**
 * @brief Error Code Register.
 *
 * This register reports any error codes generated by the Unit Roller.
 */
#define I2C_ERROR_CODE_REG (0x0D)

/**
 * @brief Key Switch Mode Register.
 *
 * This register configures the key switch mode for the Unit Roller.
 */
#define I2C_KEY_SWTICH_MODE_REG (0x0E)

/**
 * @brief Stall Protection Register.
 *
 * This register enables or disables stall protection features.
 */
#define I2C_STALL_PROTECTION_REG (0x0F)

/**
 * @brief Identification Register.
 *
 * This register contains the identity information of the Unit Roller.
 */
#define I2C_ID_REG (0x10)

/**
 * @brief Baud Rate Setting Register.
 *
 * This register sets the baud rate for communication.
 */
#define I2C_BPS_REG (0x11)

/**
 * @brief RGB Brightness Register.
 *
 * This register controls the brightness level of the RGB output.
 */
#define I2C_RGB_BRIGHTNESS_REG (0x12)

/**
 * @brief Maximum Current Register.
 *
 * This register sets the maximum current limit for the motor.
 */
#define I2C_POS_MAX_CURRENT_REG (0x20)

/**
 * @brief RGB Control Register.
 *
 * This register is used to control RGB features of the Unit Roller.
 */
#define I2C_RGB_REG (0x30)

/**
 * @brief Voltage Input Register.
 *
 * This register reads the input voltage to the Unit Roller.
 */
#define I2C_VIN_REG (0x34)

/**
 * @brief Temperature Register.
 *
 * This register provides temperature readings from the Unit Roller.
 */
#define I2C_TEMP_REG (0x38)

/**
 * @brief Dial Counter Register.
 *
 * This register tracks the dial counter value.
 */
#define I2C_DIAL_COUNTER_REG (0x3C)

/**
 * @brief Speed Register.
 *
 * This register controls the speed parameters of the Unit Roller.
 */
#define I2C_SPEED_REG (0x40)

/**
 * @brief Speed Maximum Current Register.
 *
 * This register sets the maximum current when operating at a specified speed.
 */
#define I2C_SPEED_MAX_CURRENT_REG (0x50)

/**
 * @brief Speed Readback Register.
 *
 * This register reads back the current speed of the Unit Roller.
 */
#define I2C_SPEED_READBACK_REG (0x60)

/**
 * @brief Speed PID Register.
 *
 * This register contains PID settings for speed control.
 */
#define I2C_SPEED_PID_REG (0x70)

/**
 * @brief Position Register.
 *
 * This register tracks the current position of the Unit Roller.
 */
#define I2C_POS_REG (0x80)

/**
 * @brief Position Readback Register.
 *
 * This register allows reading back the position of the Unit Roller.
 */
#define I2C_POS_READBACK_REG (0x90)

/**
 * @brief Position PID Register.
 *
 * This register contains PID settings for position control.
 */
#define I2C_POS_PID_REG (0xA0)

/**
 * @brief Current Register.
 *
 * This register tracks the current flowing through the motor.
 */
#define I2C_CURRENT_REG (0xB0)

/**
 * @brief Current Readback Register.
 *
 * This register allows reading back the current value.
 */
#define I2C_CURRENT_READBACK_REG (0xC0)

/**
 * @brief Save to Flash Register.
 *
 * This register is used to save settings or data to the flash memory of the Unit Roller.
 */
#define I2C_SAVE_FLASH_REG (0xF0)

/**
 * @brief Firmware Version Register.
 *
 * This register provides the firmware version information of the Unit Roller.
 */
#define I2C_FIRMWARE_VERSION_REG (0xFE)

/**
 * @brief I2C Address Register.
 *
 * This register contains the I2C address of the device, allowing for identification
 * on the I2C bus.
 */
#define I2C_ADDRESS_REG (0xFF)

/**
 * @brief Start Angle Calibration Register.
 *
 * This is an internal factory register that is used to initiate the calibration process for the magnetic encoder.
 */
#define START_ANGLE_CAL_REG (0xF1)

/**
 * @brief Update Angle Calibration Register.
 *
 * This is an internal factory register used to update the calibration value of the magnetic encoder.
 */
#define UPDATE_ANGLE_CAL_REG (0xF2)

/**
 * @brief Get Angle Calibration Status Register.
 *
 * This is an internal factory register used to retrieve the calibration status of the magnetic encoder.
 */
#define GET_ANGLE_BUSY_REG (0xF3)

extern bool mutexLocked;

void acquireMutex();
void releaseMutex();
int32_t handleValue(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3);

#endif
